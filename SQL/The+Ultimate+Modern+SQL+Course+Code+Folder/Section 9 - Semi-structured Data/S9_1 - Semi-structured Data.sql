USE ROLE SYSADMIN;
USE SCHEMA DEMO_DB.DEMO_SCHEMA;
USE WAREHOUSE XSMALL_WAREHOUSE;

-- Set up objects for loading JSON file
CREATE OR REPLACE TABLE MOVIE_ELT (
    JSON_VARIANT VARIANT
);

CREATE OR REPLACE FILE FORMAT JSON_FILE_FORMAT
    TYPE='JSON',
    FILE_EXTENSION=NULL,
    DATE_FORMAT='AUTO',
    TIME_FORMAT='AUTO',
    TIMESTAMP_FORMAT='AUTO',
    BINARY_FORMAT='HEX',
    TRIM_SPACE=FALSE,
    NULL_IF='',
    COMPRESSION='AUTO',
    ENABLE_OCTAL=FALSE,
    ALLOW_DUPLICATE=FALSE,
    STRIP_OUTER_ARRAY=TRUE,
    STRIP_NULL_VALUES=FALSE,
    IGNORE_UTF8_ERRORS=FALSE,
    REPLACE_INVALID_CHARACTERS=FALSE,
    SKIP_BYTE_ORDER_MARK=TRUE;

CREATE OR REPLACE STAGE MOVIE_STAGE
    FILE_FORMAT = JSON_FILE_FORMAT;

COPY INTO MOVIE_ELT 
FROM @MOVIE_STAGE
FILE_FORMAT = JSON_FILE_FORMAT;

SELECT JSON_VARIANT FROM MOVIE_ELT;

-- Query semi-structured data type
SELECT 
    JSON_VARIANT:id AS ID, 
    JSON_VARIANT:title AS TITLE, 
    JSON_VARIANT:release_date AS RELEASE_DATE, 
    JSON_VARIANT:release_date::date AS RELEASE_DATE_DD_CAST, 
    TO_DATE(JSON_VARIANT:release_date) AS RELEASE_DATE_FUNC_CAST,
    JSON_VARIANT:actors AS ACTORS,
    JSON_VARIANT:actors[0] AS FIRST_ACTOR,
    JSON_VARIANT:ratings AS RATINGS,
    JSON_VARIANT:ratings.imdb_rating AS IMDB_RATING
FROM MOVIE_ELT
WHERE RELEASE_DATE >= DATE('2000-01-01');

-- Query semi-structured data type - case sensitivity
SELECT 
    JSON_VARIANT:id AS ID, 
    JSON_VARIANT:Title AS TITLE, 
    JSON_VARIANT:release_date::date AS RELEASE_DATE, 
    JSON_VARIANT:actors[0] AS FIRST_ACTOR,
    JSON_VARIANT:RATINGS.imdb_rating AS IMDB_RATING
FROM MOVIE_ELT
WHERE RELEASE_DATE >= DATE('2000-01-01');

-- Query semi-structured data type with bracket notation
SELECT 
    JSON_VARIANT['id'] AS ID, 
    JSON_VARIANT['title'] AS TITLE, 
    JSON_VARIANT['release_date']::date AS RELEASE_DATE, 
    JSON_VARIANT['actors'][0] AS FIRST_ACTOR,
    JSON_VARIANT['ratings']['imdb_rating'] AS IMDB_RATING
FROM MOVIE_ELT
WHERE RELEASE_DATE >= DATE('2000-01-01');

-- Flatten table function
SELECT JSON_VARIANT:title, JSON_VARIANT:ratings FROM MOVIE_ELT LIMIT 1;

SELECT * FROM TABLE(FLATTEN(INPUT => SELECT JSON_VARIANT:ratings FROM MOVIE_ELT LIMIT 1));

SELECT VALUE FROM TABLE(FLATTEN(INPUT => SELECT JSON_VARIANT:ratings FROM MOVIE_ELT LIMIT 1));

-- Lateral Flatten
SELECT 
    JSON_VARIANT:title,
    JSON_VARIANT:release_date::date,
    L.VALUE 
FROM MOVIE_ELT F,
LATERAL FLATTEN(INPUT => F.JSON_VARIANT:ratings) L
LIMIT 2;

-- Extract Transform Load (ETL)
CREATE OR REPLACE TABLE MOVIE_ETL (
    ID STRING, 
    TITLE STRING, 
    RELEASE_DATE DATE, 
    STARS ARRAY, 
    RATINGS OBJECT
);

COPY INTO MOVIE_ETL FROM
(SELECT
    $1:id,
    $1:title,
    $1:release_date::date,
    $1:actors,
    $1:ratings
FROM @MOVIE_STAGE/imdb_movies.json)
FILE_FORMAT = JSON_FILE_FORMAT;

SELECT * FROM MOVIE_ETL;

SELECT 
    ID, 
    TITLE, 
    RELEASE_DATE, 
    STARS[0]::string AS FIRST_STAR, 
    RATINGS['imdb_rating'] AS IMDB_RATING 
FROM MOVIE_ETL;